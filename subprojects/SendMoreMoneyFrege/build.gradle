/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // frege-lang gradle plugin seems not compatible with recent gradle versions. Error is:
    // * What went wrong:
    // 'void org.gradle.api.plugins.JavaBasePlugin.configureForSourceSet(org.gradle.api.tasks.SourceSet, org.gradle.api.tasks.compile.AbstractCompile)'
    // comment out for now and do more work below instead
    // id 'org.frege-lang' version '0.8'
    id 'application'
}

mainClassName = "SendMoreMoneyBruteForce"

FileUtil.baseNames(sourceSets.main.allSource.files, [], ['.fr']).each { name ->
    tasks.register("run$name", JavaExec) {
        dependsOn 'fregeCompile'
        group 'Application'
        description "Run ${name}.fr as a Frege script"
        classpath = sourceSets.main.runtimeClasspath
        mainClass = name
    }
}

// rest of file borrowed heavily from:
// https://github.com/Dierk/HelloFrege/blob/a8721deddac79c771756417d44bf61de979503d5/build.gradle

ext {
    javaTarget   = 1.8
    fregeVersion = '3.25.84'
    fregeDir     = "${projectDir}/lib/org/frege-lang/frege/${fregeVersion}"
    fregeJar     = "${fregeDir}/frege-${fregeVersion}.jar"
    fregeMainSourceDir = "${projectDir}/src/main/frege"
    fregeMainJavaDir   = "${buildDir}/src/main/frege"  // where frege-created *.java files go
}

sourceCompatibility = 1.8
targetCompatibility = javaTarget

repositories {
    flatDir {
        dirs fregeDir // latest Frege version not in a maven repo
    }
    //mavenCentral()
}

// we manage dependencies as if it was a Java project
dependencies {
    implementation "org.frege-lang:frege:$fregeVersion"
    // additional dependencies go here
}

tasks.register('prepareCompileDirs') { // prepare all the directories that the frege tasks rely upon
    group "frege"
    outputs.dir(sourceSets.main.java.classesDirectory).withPropertyName("compileOutputDir")
    doLast {
        ant.mkdir(dir: sourceSets.main.java.classesDirectory)
    }
}

tasks.register('fregeCompile', JavaExec) {
    dependsOn     prepareCompileDirs
    group       = "frege"
    description = "Compile the -Pfrege_file=."
    classpath   = files fregeJar
    args([
            "-d",                                  //  target directory for *.java and *.class files
            sourceSets.main.java.classesDirectory,
            "-fp",                                 //  frege path: where to find imported frege packages
            sourceSets.main.compileClasspath.asPath,
            "-enc", "UTF-8",                       //  charset for source code files, standard is UTF-8
            "-target", javaTarget,                 //  generate code for java version n.m, also passed to javac
            "-hints",                              //  print more detailed error messages and warnings
//        "-inline",                           //  inline functions where possible
//        "-strict-pats",                      //  check patterns in multi-argument functions strictly from left to right
//        "-explain", "i[-j]"                  //  print some debugging output from type checker for line(s) i (to j).
            //  May help to understand inexplicable type errors better.
//        "-v",                                //  verbose mode on
            "-make",                               //  build outdated or missing imports
            "-sp",                                 //  look for source files in srcpath, default is .
            fregeMainSourceDir,
//        "-j",                                //  do not run the java compiler
            "-ascii",                              //  do not use ‚Üí, ‚áí, ‚àÄ and ‚à∑ when presenting types,
            //  and use ascii characters for java generics variables
//        "-greek",                            //  make greek type variables
//        "-fraktur",                          //  make ùñãùñóùñÜùñêùñôùñöùñó type variables
            "-latin",                              //  make latin type variables
            project.hasProperty("frege_file") ? project.frege_file : fregeMainSourceDir //  set the file-to-compile via a -P option, if not given use "."
    ])
    // println commandLine // for debugging the build
}

// the generated *.java source files sit beside the *.class files. We subsequently move them "back" into
// a java source dir to work better with the standard tooling (e.g. the jar task and IDE assumptions).
fregeCompile.doLast {
    ant.move(toDir: fregeMainJavaDir) {
        fileSet(dir: sourceSets.main.java.classesDirectory) {
            include name:"**/*.java"
        }
    }
}

tasks.register('fregeRun', JavaExec) {
    dependsOn     fregeCompile
    group         = "script"
    description   = "Run -Pclass_name=${project.mainClassName}"
    standardInput = System.in       // this might run interactively, so we need stdin
    classpath     = files sourceSets.main.runtimeClasspath.asPath
    mainClassName = project.hasProperty("class_name") ? project.class_name : project.mainClassName
}

compileJava.dependsOn fregeCompile
